# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_partio', [dirname(__file__)])
        except ImportError:
            import _partio
            return _partio
        if fp is not None:
            try:
                _mod = imp.load_module('_partio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _partio = swig_import_helper()
    del swig_import_helper
else:
    import _partio
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NONE = _partio.NONE
VECTOR = _partio.VECTOR
FLOAT = _partio.FLOAT
INT = _partio.INT
INDEXEDSTR = _partio.INDEXEDSTR
class ParticleAttribute(_object):
    """A handle for operating on attribbutes of a particle set"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleAttribute, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _partio.ParticleAttribute_type_set
    __swig_getmethods__["type"] = _partio.ParticleAttribute_type_get
    if _newclass:type = _swig_property(_partio.ParticleAttribute_type_get, _partio.ParticleAttribute_type_set)
    __swig_setmethods__["count"] = _partio.ParticleAttribute_count_set
    __swig_getmethods__["count"] = _partio.ParticleAttribute_count_get
    if _newclass:count = _swig_property(_partio.ParticleAttribute_count_get, _partio.ParticleAttribute_count_set)
    __swig_setmethods__["name"] = _partio.ParticleAttribute_name_set
    __swig_getmethods__["name"] = _partio.ParticleAttribute_name_get
    if _newclass:name = _swig_property(_partio.ParticleAttribute_name_get, _partio.ParticleAttribute_name_set)
    def __init__(self): 
        """
        __init__(self) -> ParticleAttribute

        Print a summary of particle file
        """
        this = _partio.new_ParticleAttribute()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _partio.delete_ParticleAttribute
    __del__ = lambda self : None;
ParticleAttribute_swigregister = _partio.ParticleAttribute_swigregister
ParticleAttribute_swigregister(ParticleAttribute)

class ParticlesInfo(_object):
    """A set of particles with associated data attributes."""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticlesInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticlesInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def numParticles(self):
        """
        numParticles(self) -> int

        Returns the number of particles in the set
        """
        return _partio.ParticlesInfo_numParticles(self)

    def numAttributes(self):
        """
        numAttributes(self) -> int

        Returns the number of particles in the set
        """
        return _partio.ParticlesInfo_numAttributes(self)

    def attributeInfo(self, *args):
        """
        attributeInfo(self, char name) -> ParticleAttribute
        attributeInfo(self, int index) -> ParticleAttribute

        Returns the attribute handle by index
        """
        return _partio.ParticlesInfo_attributeInfo(self, *args)

    __swig_destroy__ = _partio.delete_ParticlesInfo
    __del__ = lambda self : None;
ParticlesInfo_swigregister = _partio.ParticlesInfo_swigregister
ParticlesInfo_swigregister(ParticlesInfo)

class ParticlesData(ParticlesInfo):
    """A reader for a set of particles."""
    __swig_setmethods__ = {}
    for _s in [ParticlesInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticlesData, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticlesInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticlesData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def lookupIndexedStr(self, *args):
        """
        lookupIndexedStr(self, ParticleAttribute attribute, char str) -> int

        Looks up a given indexed string given the index, returns -1 if not found
        """
        return _partio.ParticlesData_lookupIndexedStr(self, *args)

    def findNPoints(self, *args):
        """
        findNPoints(self, fixedFloatArray center, int nPoints, float maxRadius) -> PyObject

        Searches for the N nearest points to the center location
        or as many as can be found within maxRadius distance.
        """
        return _partio.ParticlesData_findNPoints(self, *args)

    def findPoints(self, *args):
        """
        findPoints(self, fixedFloatArray bboxMin, fixedFloatArray bboxMax) -> PyObject

        Returns the indices of all points within the bounding
        box defined by the two cube corners bboxMin and bboxMax
        """
        return _partio.ParticlesData_findPoints(self, *args)

    def getArray(self, *args):
        """
        getArray(self, ParticleAttribute attr) -> PyObject

        Get particle data as a NumPy array
        """
        return _partio.ParticlesData_getArray(self, *args)

    def getNDArray(self, *args):
        """
        getNDArray(self, ParticleAttribute attr) -> PyObject

        Get
        """
        return _partio.ParticlesData_getNDArray(self, *args)

    def get(self, *args):
        """
        get(self, ParticleAttribute attr, ParticleIndex particleIndex) -> PyObject

        Gets attribute data for particleIndex'th particle
        """
        return _partio.ParticlesData_get(self, *args)

    def indexedStrs(self, *args):
        """
        indexedStrs(self, ParticleAttribute attr) -> PyObject

        Gets a list of all indexed strings for the given attribute handle
        """
        return _partio.ParticlesData_indexedStrs(self, *args)

    __swig_destroy__ = _partio.delete_ParticlesData
    __del__ = lambda self : None;
ParticlesData_swigregister = _partio.ParticlesData_swigregister
ParticlesData_swigregister(ParticlesData)

class ParticleIteratorTrue(_object):
    """A reader for a set of particles."""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleIteratorTrue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleIteratorTrue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> ParticleIteratorTrue

        Print a summary of particle file
        """
        this = _partio.new_ParticleIteratorTrue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _partio.delete_ParticleIteratorTrue
    __del__ = lambda self : None;
ParticleIteratorTrue_swigregister = _partio.ParticleIteratorTrue_swigregister
ParticleIteratorTrue_swigregister(ParticleIteratorTrue)

class ParticleIteratorFalse(_object):
    """A reader for a set of particles."""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleIteratorFalse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleIteratorFalse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> ParticleIteratorFalse

        Print a summary of particle file
        """
        this = _partio.new_ParticleIteratorFalse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _partio.delete_ParticleIteratorFalse
    __del__ = lambda self : None;
ParticleIteratorFalse_swigregister = _partio.ParticleIteratorFalse_swigregister
ParticleIteratorFalse_swigregister(ParticleIteratorFalse)

class ParticlesDataMutable(ParticlesData):
    """A writer for a set of particles."""
    __swig_setmethods__ = {}
    for _s in [ParticlesData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticlesDataMutable, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticlesData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticlesDataMutable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def registerIndexedStr(self, *args):
        """
        registerIndexedStr(self, ParticleAttribute attribute, char str) -> int

        Registers a string in the particular attribute
        """
        return _partio.ParticlesDataMutable_registerIndexedStr(self, *args)

    def sort(self):
        """
        sort(self)

        Prepares data for N nearest neighbor searches using the
        attribute in the file with name 'position'
        """
        return _partio.ParticlesDataMutable_sort(self)

    def addAttribute(self, *args):
        """
        addAttribute(self, char attribute, ParticleAttributeType type, int count) -> ParticleAttribute

        Adds a new attribute of given name, type and count. If type is
        partio.VECTOR, then count must be 3
        """
        return _partio.ParticlesDataMutable_addAttribute(self, *args)

    def addParticle(self):
        """
        addParticle(self) -> ParticleIndex

        Adds a new particle and returns the index
        """
        return _partio.ParticlesDataMutable_addParticle(self)

    def addParticles(self, *args):
        """
        addParticles(self, int count) -> ParticleIteratorFalse

        Adds count particles and returns the offset to the first one
        """
        return _partio.ParticlesDataMutable_addParticles(self, *args)

    def set(self, *args):
        """
        set(self, ParticleAttribute attr, uint64_t particleIndex, PyObject tuple) -> PyObject

        Sets data on a given attribute for a single particle.
        Data must be specified as tuple.
        """
        return _partio.ParticlesDataMutable_set(self, *args)

    def setArray(self, *args):
        """
        setArray(self, ParticleAttribute attr, PyObject input_array) -> PyObject

        Set particle data from a NumPy array. 
        Input array will be converted to data type numpy.float32 or numpy.int32 
        depending on attribute type. Input array length will also need to be divisible 
        by the attribute size, so it can be reshaped to fit. 

        """
        return _partio.ParticlesDataMutable_setArray(self, *args)

    __swig_destroy__ = _partio.delete_ParticlesDataMutable
    __del__ = lambda self : None;
ParticlesDataMutable_swigregister = _partio.ParticlesDataMutable_swigregister
ParticlesDataMutable_swigregister(ParticlesDataMutable)


def create():
  """
    create() -> ParticlesDataMutable

    Create an empty particle array
    """
  return _partio.create()

def read(*args):
  """
    read(char filename) -> ParticlesDataMutable

    Reads a particle set from disk
    """
  return _partio.read(*args)

def readHeaders(*args):
  """
    readHeaders(char filename) -> ParticlesInfo

    Reads a particle set headers from disk
    """
  return _partio.readHeaders(*args)

def _print(*args):
  """
    _print(ParticlesData particles)

    Print a summary of particle file
    """
  return _partio._print(*args)
# This file is compatible with both classic and new-style classes.


def write(*args):
  """
    write(char filename, ParticlesData arg1, bool arg2 = False)
    write(char filename, ParticlesData arg1)

    Writes a particle set to disk
    """
  return _partio.write(*args)

